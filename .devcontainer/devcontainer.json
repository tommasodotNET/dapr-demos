{
	"name": "MyDaprDemos",
	"image": "darquewarrior/daprdevcontainer:0.0.11",
	//"dockerFile": "./Dockerfile",
	"remoteEnv": {
		"PATH": "${containerEnv:PATH}:/home/codespace/.dapr/bin"
	},
	// Add the IDs of extensions you want installed when the container is created.
	// Note that some extensions may not work in Alpine Linux. See https://aka.ms/vscode-remote/linux.
	"extensions": [
		"doggy8088.netcore-snippets",
		"ms-azuretools.vscode-dapr",
		"GitHub.vscode-pull-request-github",
		"ms-azuretools.vscode-docker",
		"humao.rest-client",
		"ms-azuretools.vscode-bicep",
		"ms-vscode.PowerShell",
		"cweijan.vscode-redis-client",
		"ms-dotnettools.csharp",
		"hookyqr.beautify",
		"simonsiefke.prettier-vscode",
		"streetsidesoftware.code-spell-checker",
		"ms-azuretools.vscode-tye",
		"ms-kubernetes-tools.vscode-kubernetes-tools",
		"HashiCorp.terraform",
		"vscjava.vscode-java-pack",
		"ms-python.python",
		"mindaro.mindaro"
	],
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		8000,
		9411,
		30000,
		30001
	],
	// add labels
	"portsAttributes": {
		"6379": {
			"label": "dapr_Redis"
		},
		"8000": {
			"label": "Tye"
		},
		"9411": {
			"label": "dapr_Zipkin"
		},
		"50005": {
			"label": "dapr_Placement"
		}
	},
	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "uname -a",
	// Replace when using a ptrace-based debugger like C++, Go, and Rust
	// "runArgs": [ "--init", "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined" ],
	"runArgs": [
		"--init",
		"--privileged"
	],
	"mounts": [
		"source=dind-var-lib-docker,target=/var/lib/docker,type=volume"
	],
	"overrideCommand": false,
	// Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode"
}